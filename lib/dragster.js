// Generated by CoffeeScript 1.9.2
(function() {
  var Dragster,
    bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  Dragster = (function() {
    function Dragster(el) {
      this.el = el;
      this.drop = bind(this.drop, this);
      this.dragleave = bind(this.dragleave, this);
      this.dragenter = bind(this.dragenter, this);
      if (this.supportsEventConstructors()) {
        this.first = false;
        this.second = false;
        this.el.addEventListener("dragenter", this.dragenter, false);
        this.el.addEventListener("dragleave", this.dragleave, false);
        this.el.addEventListener("drop", this.drop, false);
      } else {
        throw new Error('Your browser does not support CustomEvent. Include polyfill like this https://www.npmjs.com/package/custom-event-polyfill.');
      }
    }

    Dragster.prototype.dragenter = function(event) {
      if (event.relatedTarget && event.target === event.relatedTarget) {
        return;
      }
      if (!event.relatedTarget && !event.timeStamp) {
        return;
      }
      if (this.first) {
        return this.second = true;
      } else {
        this.first = true;
        return this.el.dispatchEvent(new CustomEvent("dragster:enter", {
          bubbles: true,
          cancelable: true,
          detail: {
            dataTransfer: event.dataTransfer
          }
        }));
      }
    };

    Dragster.prototype.dragleave = function(event) {
      if (this.second) {
        this.second = false;
      } else if (this.first) {
        this.first = false;
      }
      if (!this.first && !this.second) {
        return this.el.dispatchEvent(new CustomEvent("dragster:leave", {
          bubbles: true,
          cancelable: true,
          detail: {
            dataTransfer: event.dataTransfer
          }
        }));
      }
    };

    Dragster.prototype.removeListeners = function() {
      this.el.removeEventListener("dragenter", this.dragenter, false);
      this.el.removeEventListener("dragleave", this.dragleave, false);
      return this.el.removeEventListener("drop", this.drop, false);
    };

    Dragster.prototype.supportsEventConstructors = function() {
      try {
        new CustomEvent("z");
      } catch (_error) {
        return false;
      }
      return true;
    };

    Dragster.prototype.drop = function(event) {
      event.preventDefault();
      this.first = false;
      return this.second = false;
    };

    return Dragster;

  })();

  if (typeof module === 'undefined') {
    window.Dragster = Dragster;
  } else {
    module.exports = Dragster;
  }

}).call(this);
